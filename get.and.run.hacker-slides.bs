#!/bin/bash
#
#=======================================================================
#                        get.and.run.hacker-slides.bs
#=======================================================================
#
# Clones hacker-slides [1] from my  fork (for stability),  copies slides
# (e.g., slides/*.md) to hacker-slides/slides dir, then uses xdg-open to
# launch a browser for http://localhost:8080 (i.e., hacker-slides).
#
# Yes, it's messy,  but it  worked for me  and let me very rapidly build
# and present the slides at our meeting on 2021-06-30. Saves me time vs.
# my regular, more manual deck dev methods.
#
# [1] https://github.com/msoedov/hacker-slides
#
#=======================================================================
# @anthonykava            https://pcso.link/icymi             2021-07-01
#              https://github.com/anthonykava/icit-sec.icymi
#=======================================================================

# variables
sleep="10"      # second(s) before opening browser (lazy method, I know)
timeout="2h"    # time before timing-out hacker-slides HTTP listener
hsrepo="https://github.com/anthonykava/hacker-slides" # hacker-slides
gotarball="go1.12.linux-amd64.tar.gz"                 # tar-ball for go 
godownload="https://dl.google.com/go/${gotarball}"    # URL to download

# ensuring we use go 1.12 (hacker-slides requires >=1.12)
export GOROOT="`pwd`/go"
export GOPATH="$HOME/go1.12"
export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

# download go 1.12 and unpack if needed
if [ ! -e "$GOROOT" ]; then
    if [ ! -e "$gotarball" ]; then
        wget -O "$gotarball" "$godownload" \
            && tar xzvf "$gotarball"
    fi
fi

# create bin path under $GOPATH if needed
if [ ! -e "$GOPATH" ]; then mkdir -p "${GOPATH}/bin"; fi

# clear-out old install if any
if [ -e "hacker-slides" ]; then rm -rvf ./hacker-slides; fi

# launch our browser after $sleep seconds (kludge)
( sleep "$sleep"; xdg-open "http://localhost:8080/stash" ) &

#-------------------------[ TOFU AND POTATOES ]-------------------------
#
# clone the hacker-slides repo,  copy (rsync) our slides and images into
# ./hacker-slides/, cd into ./hacker-slides,  go get go dependencies (if
# needed), and then, finally, launch hacker-slides which listens on 8080
# for HTTP (the intended target for our web browser xdg-open(1) above
#
git clone "$hsrepo" \
    && rsync -av --exclude="*.swp" slides ./hacker-slides/ \
    && cd ./hacker-slides \
    && go get \
    && timeout --foreground "$timeout" go run main.go

# some notes:
#   * press ^C to stop the HTTP listener after launched
#   * ./hacker-slides is ephemeral on purpose
#   * ./slides is meant to be the non-volatile source for slides
#   * this script relies on these commands (apart from bash):
#     - pwd, wget, tar, mkdir, rm, sleep, xdg-open, rsync, and go
#     - ( it will download x64 go 1.12 automagically )
